// Generated by CoffeeScript 1.11.1
(function() {
  var DocUtils, ImgManager,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DocUtils = require('./docUtils');

  module.exports = ImgManager = (function() {
    var imageExtensions;

    imageExtensions = ['gif', 'jpeg', 'jpg', 'emf', 'png'];

    function ImgManager(zip, fileName1) {
      this.zip = zip;
      this.fileName = fileName1;
      this.endFileName = this.fileName.replace(/^.*?([a-z0-9]+)\.xml$/, "$1");
      if (this.fileName.indexOf("ppt/slides") === 0) {
        this.fileType = "ppt";
        this.fileTypeName = "presentation";
        this.relationshipFilePath = this.fileType + "/slides/_rels/" + this.endFileName + ".xml.rels";
      } else {
        this.fileType = "word";
        this.fileTypeName = "document";
        this.relationshipFilePath = this.fileType + "/_rels/" + this.endFileName + ".xml.rels";
      }
    }

    ImgManager.prototype.getImageList = function() {
      var extension, imageList, index, regex;
      regex = /[^.]+\.([^.]+)/;
      imageList = [];
      for (index in this.zip.files) {
        extension = index.replace(regex, '$1');
        if (indexOf.call(imageExtensions, extension) >= 0) {
          imageList.push({
            "path": index,
            files: this.zip.files[index]
          });
        }
      }
      return imageList;
    };

    ImgManager.prototype.setImage = function(fileName, data, options) {
      if (options == null) {
        options = {};
      }
      this.zip.remove(fileName);
      return this.zip.file(fileName, data, options);
    };

    ImgManager.prototype.hasImage = function(fileName) {
      return this.zip.files[fileName] != null;
    };

    ImgManager.prototype.loadImageRels = function() {
      var RidArray, content, file, tag;
      file = this.zip.files[this.relationshipFilePath] || this.zip.files[this.fileType + "/_rels/" + this.fileTypeName + ".xml.rels"];
      if (file === void 0) {
        return;
      }
      content = DocUtils.decode_utf8(file.asText());
      this.xmlDoc = DocUtils.Str2xml(content);
      RidArray = (function() {
        var j, len, ref, results;
        ref = this.xmlDoc.getElementsByTagName('Relationship');
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          tag = ref[j];
          results.push(parseInt(tag.getAttribute("Id").substr(3)));
        }
        return results;
      }).call(this);
      this.maxRid = DocUtils.maxArray(RidArray);
      this.imageRels = [];
      return this;
    };

    ImgManager.prototype.addExtensionRels = function(contentType, extension) {
      var addTag, content, defaultTags, j, len, newTag, tag, types, xmlDoc;
      content = this.zip.files["[Content_Types].xml"].asText();
      xmlDoc = DocUtils.Str2xml(content);
      addTag = true;
      defaultTags = xmlDoc.getElementsByTagName('Default');
      for (j = 0, len = defaultTags.length; j < len; j++) {
        tag = defaultTags[j];
        if (tag.getAttribute('Extension') === extension) {
          addTag = false;
        }
      }
      if (addTag) {
        types = xmlDoc.getElementsByTagName("Types")[0];
        newTag = xmlDoc.createElement('Default');
        newTag.namespaceURI = null;
        newTag.setAttribute('ContentType', contentType);
        newTag.setAttribute('Extension', extension);
        types.appendChild(newTag);
        return this.setImage("[Content_Types].xml", DocUtils.encode_utf8(DocUtils.xml2Str(xmlDoc)));
      }
    };

    ImgManager.prototype.addImageRels = function(imageName, imageData, i) {
      var extension, file, newTag, realImageName, relationships;
      if (i == null) {
        i = 0;
      }
      realImageName = i === 0 ? imageName : imageName + ("(" + i + ")");
      if (this.zip.files[this.fileType + ("/media/" + realImageName)] != null) {
        return this.addImageRels(imageName, imageData, i + 1);
      }
      this.maxRid++;
      file = {
        'name': this.fileType + ("/media/" + realImageName),
        'data': imageData,
        'options': {
          base64: false,
          binary: true,
          compression: null,
          date: new Date(),
          dir: false
        }
      };
      this.zip.file(file.name, file.data, file.options);
      extension = realImageName.replace(/[^.]+\.([^.]+)/, '$1');
      this.addExtensionRels("image/" + extension, extension);
      relationships = this.xmlDoc.getElementsByTagName("Relationships")[0];
      newTag = this.xmlDoc.createElement('Relationship');
      newTag.namespaceURI = null;
      newTag.setAttribute('Id', "rId" + this.maxRid);
      newTag.setAttribute('Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image');
      if (this.fileType === "ppt") {
        newTag.setAttribute('Target', "../media/" + realImageName);
      } else {
        newTag.setAttribute('Target', "media/" + realImageName);
      }
      relationships.appendChild(newTag);
      this.setImage(this.relationshipFilePath, DocUtils.encode_utf8(DocUtils.xml2Str(this.xmlDoc)));
      return this.maxRid;
    };

    ImgManager.prototype.getImageName = function(id) {
      var fullPath, nameCandidate;
      if (id == null) {
        id = 0;
      }
      nameCandidate = "Copie_" + id + ".png";
      fullPath = this.getFullPath(nameCandidate);
      if (this.hasImage(fullPath)) {
        return this.getImageName(id + 1);
      }
      return nameCandidate;
    };

    ImgManager.prototype.getFullPath = function(imgName) {
      return this.fileType + ("/media/" + imgName);
    };

    ImgManager.prototype.getImageByRid = function(rId) {
      var cRId, j, len, path, relationship, relationships;
      relationships = this.xmlDoc.getElementsByTagName('Relationship');
      for (j = 0, len = relationships.length; j < len; j++) {
        relationship = relationships[j];
        cRId = relationship.getAttribute('Id');
        if (rId === cRId) {
          path = relationship.getAttribute('Target');
          if (path.substr(0, 6) === 'media/') {
            return this.zip.files[this.fileType + ("/" + path)];
          } else {
            throw new Error("Rid is not an image");
          }
        }
      }
      throw new Error("No Media with this Rid found");
    };

    return ImgManager;

  })();

}).call(this);
