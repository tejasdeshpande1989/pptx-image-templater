// Generated by CoffeeScript 1.11.1
(function() {
  var DocxGen, ImageModule, PptxGen, content, docX, expect, fileNames, fs, i, len, loadFile, name;

  fs = require('fs');

  DocxGen = require('docxtemplater');

  PptxGen = DocxGen.PptxGen;

  expect = require('chai').expect;

  fileNames = ['imageExample.docx', 'imageLoopExample.docx', 'imageInlineExample.docx', 'imageHeaderFooterExample.docx', 'qrExample.docx', 'noImage.docx', 'qrExample2.docx', 'imagePresentationExample.pptx'];

  ImageModule = require('../js/index.js');

  docX = {};

  loadFile = function(name) {
    var xhrDoc;
    if (fs.readFileSync != null) {
      return fs.readFileSync(__dirname + "/../examples/" + name, "binary");
    }
    xhrDoc = new XMLHttpRequest();
    xhrDoc.open('GET', "../examples/" + name, false);
    if (xhrDoc.overrideMimeType) {
      xhrDoc.overrideMimeType('text/plain; charset=x-user-defined');
    }
    xhrDoc.send();
    return xhrDoc.response;
  };

  for (i = 0, len = fileNames.length; i < len; i++) {
    name = fileNames[i];
    content = loadFile(name);
    if (name.indexOf('.docx') !== -1) {
      docX[name] = new DocxGen();
    } else {
      docX[name] = new PptxGen();
    }
    docX[name].loadedContent = content;
  }

  describe('image adding with {% image} syntax', function() {
    it('should work with one image', function() {
      var documentContent, documentFile, imageFile, imageModule, out, relsFile, relsFileContent, zip;
      name = 'imageExample.docx';
      imageModule = new ImageModule({
        centered: false
      });
      docX[name].attachModule(imageModule);
      out = docX[name].load(docX[name].loadedContent).setData({
        image: 'examples/image.png'
      }).render();
      zip = out.getZip();
      imageFile = zip.files['word/media/image_generated_1.png'];
      expect(imageFile != null).to.equal(true);
      expect(imageFile.asText().length).to.equal(17417);
      relsFile = zip.files['word/_rels/document.xml.rels'];
      expect(relsFile != null).to.equal(true);
      relsFileContent = relsFile.asText();
      expect(relsFileContent).to.equal("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\" Target=\"numbering.xml\"/><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\" Target=\"settings.xml\"/><Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\" Target=\"footnotes.xml\"/><Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes\" Target=\"endnotes.xml\"/><Relationship Id=\"hId0\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\" Target=\"header0.xml\"/><Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"media/image_generated_1.png\"/></Relationships>");
      documentFile = zip.files['word/document.xml'];
      expect(documentFile != null).to.equal(true);
      documentContent = documentFile.asText();
      return fs.writeFile("test.docx", zip.generate({
        type: "nodebuffer"
      }));
    });
    it('should work with centering', function() {
      var d, documentContent, documentFile, imageFile, imageModule, out, relsFile, relsFileContent, zip;
      d = new DocxGen();
      name = 'imageExample.docx';
      imageModule = new ImageModule({
        centered: true
      });
      d.attachModule(imageModule);
      out = d.load(docX[name].loadedContent).setData({
        image: 'examples/image.png'
      }).render();
      zip = out.getZip();
      imageFile = zip.files['word/media/image_generated_1.png'];
      expect(imageFile != null).to.equal(true);
      expect(imageFile.asText().length).to.equal(17417);
      relsFile = zip.files['word/_rels/document.xml.rels'];
      expect(relsFile != null).to.equal(true);
      relsFileContent = relsFile.asText();
      expect(relsFileContent).to.equal("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\" Target=\"numbering.xml\"/><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\" Target=\"settings.xml\"/><Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\" Target=\"footnotes.xml\"/><Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes\" Target=\"endnotes.xml\"/><Relationship Id=\"hId0\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\" Target=\"header0.xml\"/><Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"media/image_generated_1.png\"/></Relationships>");
      documentFile = zip.files['word/document.xml'];
      expect(documentFile != null).to.equal(true);
      documentContent = documentFile.asText();
      return fs.writeFile("test_center.docx", zip.generate({
        type: "nodebuffer"
      }));
    });
    it('should work with loops', function() {
      var buffer, documentContent, documentFile, imageFile, imageFile2, imageModule, out, relsFile, relsFileContent, zip;
      name = 'imageLoopExample.docx';
      imageModule = new ImageModule({
        centered: true
      });
      docX[name].attachModule(imageModule);
      out = docX[name].load(docX[name].loadedContent).setData({
        images: ['examples/image.png', 'examples/image2.png']
      });
      out.render();
      zip = out.getZip();
      imageFile = zip.files['word/media/image_generated_1.png'];
      expect(imageFile != null).to.equal(true);
      expect(imageFile.asText().length).to.equal(17417);
      imageFile2 = zip.files['word/media/image_generated_2.png'];
      expect(imageFile2 != null).to.equal(true);
      expect(imageFile2.asText().length).to.equal(7177);
      relsFile = zip.files['word/_rels/document.xml.rels'];
      expect(relsFile != null).to.equal(true);
      relsFileContent = relsFile.asText();
      expect(relsFileContent).to.equal("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\" Target=\"numbering.xml\"/><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\" Target=\"settings.xml\"/><Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\" Target=\"footnotes.xml\"/><Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes\" Target=\"endnotes.xml\"/><Relationship Id=\"hId0\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\" Target=\"header0.xml\"/><Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"media/image_generated_1.png\"/><Relationship Id=\"rId7\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"media/image_generated_2.png\"/></Relationships>");
      documentFile = zip.files['word/document.xml'];
      expect(documentFile != null).to.equal(true);
      documentContent = documentFile.asText();
      buffer = zip.generate({
        type: "nodebuffer"
      });
      return fs.writeFile("test_multi.docx", buffer);
    });
    it('should work in powerpoint presentations', function() {
      var imageFile, imageModule, out, zip;
      name = 'imagePresentationExample.pptx';
      imageModule = new ImageModule({
        centered: false,
        presentation: true
      });
      docX[name].attachModule(imageModule);
      out = docX[name].load(docX[name].loadedContent).setData({
        image: 'examples/image.png'
      }).render();
      zip = out.getZip();
      imageFile = zip.files['ppt/media/image_generated_1.png'];
      expect(imageFile != null).to.equal(true);
      return fs.writeFile("test_presentation_image.pptx", zip.generate({
        type: "nodebuffer"
      }));
    });
    return it('should work with image in header/footer', function() {
      var documentContent, documentFile, footerRelsFile, footerRelsFileContent, headerRelsFile, headerRelsFileContent, imageFile, imageFile2, imageModule, out, relsFile, relsFileContent, zip;
      name = 'imageHeaderFooterExample.docx';
      imageModule = new ImageModule({
        centered: false
      });
      docX[name].attachModule(imageModule);
      out = docX[name].load(docX[name].loadedContent).setData({
        image: 'examples/image.png'
      }).render();
      zip = out.getZip();
      imageFile = zip.files['word/media/image_generated_1.png'];
      expect(imageFile != null).to.equal(true);
      expect(imageFile.asText().length).to.equal(17417);
      imageFile2 = zip.files['word/media/image_generated_2.png'];
      expect(imageFile2 != null).to.equal(true);
      expect(imageFile2.asText().length).to.equal(17417);
      relsFile = zip.files['word/_rels/document.xml.rels'];
      expect(relsFile != null).to.equal(true);
      relsFileContent = relsFile.asText();
      expect(relsFileContent).to.equal("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\" Target=\"header1.xml\"/><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\" Target=\"footer1.xml\"/><Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\"/><Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\" Target=\"settings.xml\"/>\n</Relationships>");
      headerRelsFile = zip.files['word/_rels/header1.xml.rels'];
      expect(headerRelsFile != null).to.equal(true);
      headerRelsFileContent = headerRelsFile.asText();
      expect(headerRelsFileContent).to.equal("<?xml version=\"1.0\" encoding=\"UTF-8\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\" Target=\"header1.xml\"/><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\" Target=\"footer1.xml\"/><Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\"/><Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\" Target=\"settings.xml\"/>\n<Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"media/image_generated_2.png\"/></Relationships>");
      footerRelsFile = zip.files['word/_rels/footer1.xml.rels'];
      expect(footerRelsFile != null).to.equal(true);
      footerRelsFileContent = footerRelsFile.asText();
      expect(footerRelsFileContent).to.equal("<?xml version=\"1.0\" encoding=\"UTF-8\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\" Target=\"header1.xml\"/><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\" Target=\"footer1.xml\"/><Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\" Target=\"fontTable.xml\"/><Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\" Target=\"settings.xml\"/>\n<Relationship Id=\"rId6\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"media/image_generated_1.png\"/></Relationships>");
      documentFile = zip.files['word/document.xml'];
      expect(documentFile != null).to.equal(true);
      documentContent = documentFile.asText();
      expect(documentContent).to.equal("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<w:document xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" xmlns:w10=\"urn:schemas-microsoft-com:office:word\" xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"><w:body><w:p><w:pPr><w:pStyle w:val=\"Normal\"/><w:rPr></w:rPr></w:pPr><w:r><w:rPr></w:rPr></w:r></w:p><w:sectPr><w:headerReference w:type=\"default\" r:id=\"rId2\"/><w:footerReference w:type=\"default\" r:id=\"rId3\"/><w:type w:val=\"nextPage\"/><w:pgSz w:w=\"12240\" w:h=\"15840\"/><w:pgMar w:left=\"1800\" w:right=\"1800\" w:header=\"720\" w:top=\"2810\" w:footer=\"1440\" w:bottom=\"2003\" w:gutter=\"0\"/><w:pgNumType w:fmt=\"decimal\"/><w:formProt w:val=\"false\"/><w:textDirection w:val=\"lrTb\"/><w:docGrid w:type=\"default\" w:linePitch=\"249\" w:charSpace=\"2047\"/></w:sectPr></w:body></w:document>");
      return fs.writeFile("test_header_footer.docx", zip.generate({
        type: "nodebuffer"
      }));
    });
  });

  describe('qrcode replacing', function() {
    describe('shoud work without loops', function() {
      var zip;
      zip = null;
      before(function(done) {
        var imageModule;
        name = 'qrExample.docx';
        imageModule = new ImageModule({
          qrCode: true
        });
        imageModule.getImageFromData = function(imgData) {
          var d;
          d = fs.readFileSync('examples/' + imgData, 'binary');
          return d;
        };
        imageModule.finished = function() {
          var buffer;
          zip = docX[name].getZip();
          buffer = zip.generate({
            type: "nodebuffer"
          });
          fs.writeFile("test_qr.docx", buffer);
          return done();
        };
        docX[name] = docX[name].load(docX[name].loadedContent).setData({
          image: 'image'
        });
        docX[name].attachModule(imageModule);
        return docX[name].render();
      });
      return it('should work with simple', function() {
        var images;
        images = zip.file(/media\/.*.png/);
        expect(images.length).to.equal(2);
        expect(images[0].asText().length).to.equal(826);
        return expect(images[1].asText().length).to.equal(17417);
      });
    });
    describe('should work with two', function() {
      var zip;
      zip = null;
      before(function(done) {
        var imageModule;
        name = 'qrExample2.docx';
        imageModule = new ImageModule({
          qrCode: true
        });
        imageModule.getImageFromData = function(imgData) {
          var d;
          d = fs.readFileSync('examples/' + imgData, 'binary');
          return d;
        };
        imageModule.finished = function() {
          var buffer;
          zip = docX[name].getZip();
          buffer = zip.generate({
            type: "nodebuffer"
          });
          fs.writeFile("test_qr2.docx", buffer);
          return done();
        };
        docX[name] = docX[name].load(docX[name].loadedContent).setData({
          image: 'image',
          image2: 'image2.png'
        });
        docX[name].attachModule(imageModule);
        return docX[name].render();
      });
      return it('should work with two', function() {
        var images;
        images = zip.file(/media\/.*.png/);
        expect(images.length).to.equal(4);
        expect(images[0].asText().length).to.equal(859);
        expect(images[1].asText().length).to.equal(826);
        expect(images[2].asText().length).to.equal(17417);
        return expect(images[3].asText().length).to.equal(7177);
      });
    });
    return describe('should work without images (it should call finished())', function() {
      var d;
      d = null;
      before(function(done) {
        var imageModule, out;
        d = new DocxGen();
        name = 'noImage.docx';
        imageModule = new ImageModule({
          qrCode: true
        });
        imageModule.finished = function() {
          var buffer, zip;
          zip = d.getZip();
          buffer = zip.generate({
            type: "nodebuffer"
          });
          fs.writeFile("testNoImage.docx", buffer);
          return done();
        };
        d.attachModule(imageModule);
        return out = d.load(docX[name].loadedContent).setData().render();
      });
      return it('should have the same text', function() {
        var text;
        text = d.getFullText();
        return expect(text).to.equal("Here is no image");
      });
    });
  });

}).call(this);
